{"version":3,"sources":["utils/history.js","config/config.js","components/AppNavBar.js","pages/Home.js","pages/Classrooms.js","pages/Reservations.js","pages/ClassroomsAdmin.js","pages/ItemsAdmin.js","App.js","utils/reportWebVitals.js","utils/serviceWorker.js","index.js"],"names":["createBrowserHistory","getApiConfig","base_url","configJson","API","URL_BASE_PROD","classrooms","URL_ALIAS_CLASSROOMS","types","URL_ALIAS_CLASSROOMS_TYPES","items","URL_ALIAS_ITEMS","filtering","URL_ALIAS_CLASSROOMS_FILTERING","getRouterConfig","aliasHome","ROUTER","ALIAS_HOME","aliasClassrooms","ALIAS_CLASSROOMS_VIEW","aliasReservations","ALIAS_RESERVATIONS","aliasItemsAdm","ALIAS_ITEMS_ADMIN","aliasClassroomsAdm","ALIAS_CLASSROOMS_ADMIN","configRouter","mappingTabToPath","1","2","3","4","5","AppNavBar","props","nav","useNavigate","useState","value","setValue","useAuth0","user","isAuthenticated","loginWithRedirect","logout","useEffect","handleTabChange","event","newValue","AppBar","component","Paper","variant","align","position","sx","color","fontWeight","background","Toolbar","IconButton","size","edge","aria-label","mr","onClick","Tabs","onChange","flexGrow","scrollButtons","allowScrollButtonsMobile","Tab","label","aria-controls","aria-haspopup","fontSize","src","picture","alt","className","width","Home","elevation","m","p","configApi","Classrooms","filteredRooms","setFilteredRooms","dateStart","Date","now","dateEnd","capacity","type","equipment","filters","setFilters","numSelected","setNumSelected","classId","classType","classCapacity","newRoom","setNewRoom","getFilteredClassroomsData","a","Axios","get","headers","params","start","toISOString","end","capacityMin","classTypes","find","c","keyWords","response","data","map","selected","mb","Grid","container","spacing","xs","md","columns","sm","LocalizationProvider","dateAdapter","AdapterDateFns","locale","pl","item","DateTimePicker","OpenPickerButtonProps","showTodayButton","todayText","e","prevState","renderInput","TextField","ampm","mask","minDate","minDateTime","onError","console","log","Autocomplete","disablePortal","popupIcon","clearIcon","options","target","textContent","id","InputProps","endAdornment","InputAdornment","InputLabelProps","shrink","TableContainer","Table","checboxselection","minWidTableCell","TableHead","TableRow","TableCell","padding","Checkbox","inputProps","indeterminate","length","checked","room","TableBody","handleSelectClick","name","typeObject","typeName","mt","Button","ml","Reservations","ClassroomsAdmin","allRooms","setAllRooms","setTypes","getClassroomsData","getAccessTokenSilently","createClassroom","token","post","typeObjectId","t","then","catch","error","TableFooter","required","fullwidth","filter","r","forEach","rr","delete","ItemsAdmin","setItems","getItemsData","quantity","description","visibility","theme","createTheme","palette","mode","primary","main","secondary","App","setClassTypes","bindDictionary","ThemeProvider","history","CssBaseline","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","config","audience","AUTH0","AUDIENCE","domain","DOMAIN","clientId","CLIENTID","getAuthConfig","providerConfig","redirectUri","origin","onRedirectCallback","appState","push","returnTo","pathname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bf4203c.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();\r\n","import configJson from \"./config.json\";\r\n\r\nexport const getAuthConfig = () => {\r\n  const audience =\r\n    configJson.AUTH0.AUDIENCE && configJson.AUTH0.AUDIENCE !== \"YOUR_API_IDENTIFIER\"\r\n      ? configJson.AUTH0.AUDIENCE\r\n      : null;\r\n\r\n  return {\r\n    domain: configJson.AUTH0.DOMAIN,\r\n    clientId: configJson.AUTH0.CLIENTID,\r\n    ...(audience ? { audience } : null),\r\n  };\r\n}\r\n\r\nexport const getApiConfig = () => {\r\n  const base_url = process.env.NODE_ENV === 'production' ? configJson.API.URL_BASE_PROD : configJson.API.URL_BASE_DEV;\r\n  return {\r\n    classrooms: base_url + configJson.API.URL_ALIAS_CLASSROOMS,\r\n    types: base_url + configJson.API.URL_ALIAS_CLASSROOMS_TYPES,\r\n    items: base_url + configJson.API.URL_ALIAS_ITEMS,\r\n    filtering: base_url + configJson.API.URL_ALIAS_CLASSROOMS_FILTERING\r\n  }\r\n}\r\n\r\nexport const getRouterConfig = () => {\r\n  return {\r\n    aliasHome: configJson.ROUTER.ALIAS_HOME,\r\n    aliasClassrooms: configJson.ROUTER.ALIAS_CLASSROOMS_VIEW,\r\n    aliasReservations: configJson.ROUTER.ALIAS_RESERVATIONS,\r\n    aliasItemsAdm: configJson.ROUTER.ALIAS_ITEMS_ADMIN,\r\n    aliasClassroomsAdm: configJson.ROUTER.ALIAS_CLASSROOMS_ADMIN\r\n  }\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Paper, AppBar, Toolbar, IconButton, Tabs, Tab\r\n} from '@mui/material';\r\nimport AccountCircle from '@mui/icons-material/AccountCircle';\r\nimport DoubleArrowIcon from '@mui/icons-material/DoubleArrow';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport { getRouterConfig } from \"../config/config\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst configRouter = getRouterConfig();\r\nconst mappingTabToPath = {\r\n    1: configRouter.aliasHome,\r\n    2: configRouter.aliasClassrooms,\r\n    3: configRouter.aliasReservations,\r\n    4: configRouter.aliasClassroomsAdm,\r\n    5: configRouter.aliasItemsAdm\r\n};\r\n\r\nfunction AppNavBar(props) {\r\n    const nav = useNavigate();\r\n    const [value, setValue] = useState(1);\r\n    const {\r\n        user,\r\n        isAuthenticated,\r\n        loginWithRedirect,\r\n        logout\r\n    } = useAuth0();\r\n\r\n    useEffect(() => {\r\n    });\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        nav(mappingTabToPath[newValue]);\r\n        setValue(newValue);\r\n    };\r\n\r\n    const nextTab = (event) => {\r\n        const nextValue = value === 5 ? 1 : (value + 1);\r\n        handleTabChange(event, nextValue);\r\n    };\r\n\r\n    return (\r\n        <AppBar component={Paper} variant='elevation' align='left' position=\"sticky\" sx={{\r\n            color: '#007ECC', fontWeight: 'bold',\r\n            background: 'linear-gradient(45deg, #E69A2E 20%,#FFC87A 90%)'\r\n        }}>\r\n            <Toolbar>\r\n                <IconButton size=\"large\" edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}\r\n                    onClick={nextTab}\r\n                >\r\n                    <DoubleArrowIcon />\r\n                </IconButton>\r\n                <Tabs onChange={handleTabChange} aria-label=\"basic tabs example\"\r\n                    sx={{ flexGrow: 1 }} variant='scrollable' scrollButtons='auto'\r\n                    allowScrollButtonsMobile value={value}\r\n                >\r\n                    <Tab label=\"O aplikacji\" value={1} />\r\n                    <Tab label=\"Szukaj\" value={2} />\r\n                    <Tab label=\"Rezerwacje\" value={3} />\r\n                    <Tab label=\"Pomieszczenia\" value={4} />\r\n                    <Tab label=\"Wyposażenie\" value={5} />\r\n                </Tabs>\r\n                {\r\n                    isAuthenticated ?\r\n                        (\r\n                            <>\r\n                                <IconButton aria-label=\"account of current user\" aria-controls=\"menu-appbar\"\r\n                                    aria-haspopup=\"true\" color=\"inherit\" edge='end' size='large' sx={{ mr: 1 }}\r\n                                    onClick={logout}\r\n                                >\r\n                                    <LogoutIcon sx={{ fontSize: 40 }} />\r\n                                </IconButton>\r\n                                <img\r\n                                    src={user.picture}\r\n                                    alt=\"Profile\"\r\n                                    className=\"nav-user-profile rounded-circle\"\r\n                                    width=\"40\" />\r\n                            </>\r\n                        ) :\r\n                        (\r\n                            <IconButton aria-label=\"account of current user\" aria-controls=\"menu-appbar\"\r\n                                aria-haspopup=\"true\" color=\"inherit\" edge='end' size='large'\r\n                                onClick={loginWithRedirect}\r\n                            >\r\n                                <AccountCircle sx={{ fontSize: 40 }} />\r\n                            </IconButton>\r\n                        )\r\n                }\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default AppNavBar;","import { Paper } from '@mui/material'\r\nimport React from 'react'\r\n\r\nfunction Home() {\r\n    return (\r\n        <Paper elevation={24} sx={{ m: 2, p: 2 }} align=\"center\">\r\n            Witaj w aplikacji do wyszukiwania i zarządzania salami zajęciowymi.\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useState } from 'react';\r\nimport Axios from 'axios';\r\nimport {\r\n    Button, Checkbox, Paper,\r\n    Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\r\n    TextField, InputAdornment, Grid\r\n} from '@mui/material';\r\nimport DialpadIcon from '@mui/icons-material/Dialpad';\r\nimport TextFieldsIcon from '@mui/icons-material/TextFields';\r\nimport ArrowDD from '@mui/icons-material/ArrowDropDownCircleOutlined';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport { pl } from 'date-fns/locale';\r\nimport { getApiConfig } from \"../config/config.js\";\r\n//import { useForm } from \"react-hook-form\";\r\n\r\nconst configApi = getApiConfig();\r\n\r\nfunction Classrooms(props) {\r\n    const [filteredRooms, setFilteredRooms] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        dateStart: new Date(Date.now()), dateEnd: new Date(Date.now()),\r\n        capacity: 0, type: \"Standard\", equipment: \"\"\r\n    });\r\n    const [numSelected, setNumSelected] = useState(0);\r\n    const [newRoom, setNewRoom] = useState({ classId: \"\", className: \"\", classType: \"\", classCapacity: 0 });\r\n\r\n    const getFilteredClassroomsData = async () => {\r\n        const response = await Axios.get(configApi.classrooms, {\r\n            headers: {\r\n                'Access-ConTableRowol-Allow-Origin': true,\r\n            },\r\n            params: {\r\n                start: filters.dateStart.toISOString(),\r\n                end: filters.dateEnd.toISOString(),\r\n                capacityMin: filters.capacity,\r\n                type: props.classTypes.find(c => c.label === filters.type).value,\r\n                keyWords: filters.equipment\r\n            }\r\n        });\r\n        setFilteredRooms(response.data.map((data) => ({ ...data, selected: false })));\r\n    }\r\n\r\n    const handleSelectClick = (event, room) => {\r\n        room.selected = event.target.checked;\r\n        setFilteredRooms([...filteredRooms]);\r\n        if (event.target.checked) {\r\n            setNumSelected(numSelected + 1);\r\n        }\r\n        else {\r\n            setNumSelected(numSelected - 1);\r\n        }\r\n    }\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            setNumSelected(filteredRooms.length);\r\n            setFilteredRooms(filteredRooms.map((room) => ({ ...room, selected: true })));\r\n        }\r\n        else {\r\n            setNumSelected(0);\r\n            setFilteredRooms(filteredRooms.map((room) => ({ ...room, selected: false })));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Paper elevation={24} sx={{ p: 2, flexGrow: 1, mb: 2 }}>\r\n                <Grid container spacing={{ xs: 2, md: 2 }} columns={{ xs: 4, sm: 8, md: 20 }}>\r\n                    <LocalizationProvider dateAdapter={AdapterDateFns} locale={pl}>\r\n                        <Grid item xs={2} sm={4} md={4} key={1}>\r\n                            <DateTimePicker OpenPickerButtonProps={{ color: 'primary' }}\r\n                                showTodayButton todayText='Now'\r\n                                label=\"Data i godzina rozpoczęcia\"\r\n                                value={filters.dateStart}\r\n                                onChange={(e) => setFilters(prevState => ({ ...prevState, dateStart: e }))}\r\n                                renderInput={(params) => <TextField size='small' {...params} />}\r\n                                ampm={false}\r\n                                mask='__.__._____ __:__'\r\n                                minDate={new Date(Date.now())}\r\n                                minDateTime={new Date(Date.now())}\r\n                                onError={console.log}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={2} sm={4} md={4} key={2}>\r\n                            <DateTimePicker OpenPickerButtonProps={{ color: 'primary' }}\r\n                                showTodayButton todayText='Now'\r\n                                label=\"Data i godzina zakończenia\"\r\n                                value={filters.dateEnd}\r\n                                onChange={(e) => setFilters(prevState => ({ ...prevState, dateEnd: e }))}\r\n                                renderInput={(params) => <TextField size='small' {...params} />}\r\n                                ampm={false}\r\n                                mask='__.__._____ __:__'\r\n                                minDate={new Date(Date.now())}\r\n                                minDateTime={new Date(Date.now())}\r\n                                onError={console.log}\r\n                            />\r\n                        </Grid>\r\n                    </LocalizationProvider>\r\n                    <Grid item xs={2} sm={4} md={4} key={3}>\r\n                        <Autocomplete\r\n                            disablePortal size='small'\r\n                            popupIcon={<ArrowDD color='primary' fontSize='small' />}\r\n                            clearIcon={<CancelIcon color='primary' fontSize='small' />}\r\n                            options={props.classTypes}\r\n                            value={filters.type}\r\n                            onChange={(e) => setFilters(prevState => ({ ...prevState, type: e.target.textContent }))}\r\n                            renderInput={(params) => <TextField {...params} label=\"Typ\" value={filters.type} variant='outlined'\r\n                                onChange={(e) => setFilters(prevState => ({ ...prevState, type: e.target.textContent }))} />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={4} md={4} key={4}>\r\n                        <TextField id=\"outlined-basic\" label=\"Minimalna pojemność\" variant=\"outlined\"\r\n                            size='small' sx={{ mr: 2, width: 150 }}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position='end'>\r\n                                        <DialpadIcon color='primary' fontSize='small' />\r\n                                    </InputAdornment>)\r\n                            }}\r\n                            value={filters.capacity} InputLabelProps={{ shrink: true }}\r\n                            onChange={(e) => setFilters(prevState => ({ ...prevState, capacity: e.target.value }))} />\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={4} md={4} key={5}>\r\n                        <TextField id=\"outlined-basic\" label=\"Wyposażenie\" variant=\"outlined\"\r\n                            size='small'\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position='end'>\r\n                                        <TextFieldsIcon color='primary' fontSize='small' />\r\n                                    </InputAdornment>)\r\n                            }}\r\n                            value={newRoom.className}\r\n                            onChange={(event) => setNewRoom(prevState => ({ ...prevState, className: event.target.value }))} />\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <TableContainer component={Paper}>\r\n                <Table checboxselection=\"true\" sx={{ minWidTableCell: 850 }}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell padding=\"checkbox\">\r\n                                <Checkbox color=\"primary\" inputProps={{ 'aria-label': 'select all desserts', }}\r\n                                    indeterminate={numSelected > 0 && numSelected < filteredRooms.length}\r\n                                    checked={filteredRooms.length > 0 && numSelected === filteredRooms.length}\r\n                                    onChange={handleSelectAllClick} />\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Classroom Id</TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Name</TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Type</TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Capacity</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {filteredRooms.map(room => <TableRow key={room.id}>\r\n                            <TableCell padding=\"checkbox\">\r\n                                <Checkbox color=\"secondary\" inputProps={{ 'aria-label': 'select all desserts', }}\r\n                                    checked={room.selected}\r\n                                    onChange={(e) => { handleSelectClick(e, room); }} />\r\n                            </TableCell>\r\n                            <TableCell width='300'>{room.id}</TableCell>\r\n                            <TableCell>{room.name}</TableCell>\r\n                            <TableCell width='300'>{room.typeObject.typeName}</TableCell>\r\n                            <TableCell width='300'>{room.capacity}</TableCell>\r\n                        </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <Paper elevation={24} sx={{ mt: 2, p: 3 }} align=\"left\">\r\n                <Button variant=\"contained\" color='primary' sx={{ ml: 4, mr: 2, color: '#FFFFFF' }}\r\n                    onClick={getFilteredClassroomsData}>\r\n                    Szukaj\r\n                </Button>\r\n                <Button variant=\"contained\" color='secondary' sx={{ mr: 2, color: '#FFFFFF' }}\r\n                >\r\n                    Zarezerwuj\r\n                </Button>\r\n            </Paper>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Classrooms;","import React from 'react';\r\n\r\nfunction Reservations() {\r\n    return (\r\n        <div>\r\n            Reservations\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reservations\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport {\r\n    Button, Checkbox, Paper,\r\n    Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\r\n    TableFooter, TextField, InputAdornment,\r\n} from '@mui/material';\r\nimport DialpadIcon from '@mui/icons-material/Dialpad';\r\nimport TextFieldsIcon from '@mui/icons-material/TextFields';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport { getApiConfig } from \"../config/config.js\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n//import { useForm } from \"react-hook-form\";\r\n\r\nconst configApi = getApiConfig();\r\n\r\nfunction ClassroomsAdmin(props) {\r\n    const [allRooms, setAllRooms] = useState([]);\r\n    const [newRoom, setNewRoom] = useState({ classId: \"\", className: \"\", classType: \"Standard\", classCapacity: 0 });\r\n    const [numSelected, setNumSelected] = useState(0);\r\n    const [types, setTypes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTypes(props.classTypes);\r\n        getClassroomsData();\r\n    }, [props.classTypes]);\r\n\r\n    const {\r\n        getAccessTokenSilently,\r\n    } = useAuth0();\r\n\r\n    const getClassroomsData = async () => {\r\n        const response = await Axios.get(configApi.classrooms, {\r\n            headers: {\r\n                'Access-ConTableRowol-Allow-Origin': true,\r\n            },\r\n        });\r\n        setAllRooms(response.data.map((data) => ({ ...data, selected: false })));\r\n    }\r\n\r\n    const createClassroom = async () => {\r\n        try {\r\n            const token = await getAccessTokenSilently();\r\n            await Axios.post(configApi.classrooms, {\r\n                id: newRoom.classId,\r\n                name: newRoom.className,\r\n                typeObjectId: types.find(t => t.label === newRoom.classType).value,\r\n                capacity: newRoom.classCapacity\r\n            },\r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Access-ConTableRowol-Allow-Origin': true,\r\n                    }\r\n                }).then((response) => {\r\n                    setAllRooms([...allRooms, { ...response.data, selected: false }])\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                });\r\n            setNewRoom({ classId: \"\", className: \"\", classCapacity: 0, classType: \"\" });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const deleteClassroom = () => {\r\n        allRooms.filter(r => r.selected === true).forEach(rr => {\r\n            Axios.delete(`${configApi.classrooms}/${rr.id}`)\r\n                .then(() => { getClassroomsData(); });\r\n        });\r\n    }\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            setNumSelected(allRooms.length);\r\n            setAllRooms(allRooms.map((room) => ({ ...room, selected: true })));\r\n        }\r\n        else {\r\n            setNumSelected(0);\r\n            setAllRooms(allRooms.map((room) => ({ ...room, selected: false })));\r\n        }\r\n    }\r\n\r\n    const handleSelectClick = (event, room) => {\r\n        room.selected = event.target.checked;\r\n        setAllRooms([...allRooms]);\r\n        if (event.target.checked) {\r\n            setNumSelected(numSelected + 1);\r\n        }\r\n        else {\r\n            setNumSelected(numSelected - 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TableContainer component={Paper}>\r\n                <Table checboxselection=\"true\" sx={{ minWidTableCell: 850 }}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell padding=\"checkbox\">\r\n                                <Checkbox color=\"primary\" inputProps={{ 'aria-label': 'select all desserts', }}\r\n                                    indeterminate={numSelected > 0 && numSelected < allRooms.length}\r\n                                    checked={allRooms.length > 0 && numSelected === allRooms.length}\r\n                                    onChange={handleSelectAllClick}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Classroom Id</TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Name</TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Type</TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Capacity</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {allRooms.map(room =>\r\n                            <TableRow key={room.id}>\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox color=\"secondary\" inputProps={{ 'aria-label': 'select all desserts', }}\r\n                                        checked={room.selected}\r\n                                        onChange={(e) => { handleSelectClick(e, room) }}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell width='300'>{room.id}</TableCell>\r\n                                <TableCell>{room.name}</TableCell>\r\n                                <TableCell width='300'>{room.typeObject.typeName}</TableCell>\r\n                                <TableCell width='300'>{room.capacity}</TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TableCell padding=\"checkbox\">\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <TextField id=\"outlined-basic\" label='New Classroom id' variant=\"outlined\"\r\n                                    required size='small' fullwidth\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position='end'>\r\n                                                <DialpadIcon color='primary' />\r\n                                            </InputAdornment>)\r\n                                    }}\r\n                                    value={newRoom.classId}\r\n                                    onChange={(event) => setNewRoom(prevState => ({ ...prevState, classId: event.target.value }))}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" required\r\n                                    size='small' fullwidth\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position='end'>\r\n                                                <TextFieldsIcon color='primary' />\r\n                                            </InputAdornment>)\r\n                                    }}\r\n                                    value={newRoom.className}\r\n                                    onChange={(event) => setNewRoom(prevState => ({ ...prevState, className: event.target.value }))}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Autocomplete\r\n                                    disablePortal size='small' fullwidth variant='outlined'\r\n                                    id=\"combo-box-demo\"\r\n                                    options={props.classTypes}\r\n                                    value={newRoom.classType}\r\n                                    onChange={(e) => setNewRoom(prevState => ({ ...prevState, classType: e.target.textContent }))}\r\n                                    renderInput={(params) =>\r\n                                        <TextField {...params} label=\"Type\" value={newRoom.classType}\r\n                                            onChange={(e) => setNewRoom(prevState => ({ ...prevState, classType: e.target.textContent }))}\r\n                                        />}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <TextField id=\"outlined-basic\" label=\"Capacity\" variant=\"outlined\" required\r\n                                    size='small' fullwidth\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position='end'>\r\n                                                <DialpadIcon color='primary' />\r\n                                            </InputAdornment>)\r\n                                    }}\r\n                                    value={newRoom.classCapacity} InputLabelProps={{ shrink: true }}\r\n                                    onChange={(event) => setNewRoom(prevState => ({ ...prevState, classCapacity: event.target.value }))}\r\n                                />\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n            <Paper elevation={24} sx={{ mt: 2, p: 3 }} align=\"left\">\r\n                <Button variant=\"contained\" color='primary' sx={{ ml: 4, mr: 2, color: '#FFFFFF' }}\r\n                    onClick={createClassroom}>\r\n                    Dodaj\r\n                </Button>\r\n                <Button variant=\"contained\" color='secondary' sx={{ mr: 2, color: '#FFFFFF' }}\r\n                    onClick={deleteClassroom}>\r\n                    Usuń\r\n                </Button>\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClassroomsAdmin;","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport {\r\n    Checkbox, Paper,\r\n    Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\r\n    TableFooter, TextField, InputAdornment\r\n} from '@mui/material';\r\nimport DialpadIcon from '@mui/icons-material/Dialpad';\r\nimport TextFieldsIcon from '@mui/icons-material/TextFields';\r\nimport { getApiConfig } from \"../config/config.js\";\r\n//import { useForm } from \"react-hook-form\";\r\n\r\nconst configApi = getApiConfig();\r\n\r\nfunction ItemsAdmin(props) {\r\n    const [items, setItems] = useState([]);\r\n    const [numSelected, setNumSelected] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getItemsData();\r\n    }, []);\r\n\r\n    const getItemsData = async () => {\r\n        const response = await Axios.get(configApi.items, {\r\n            headers: {\r\n                'Access-ConTableRowol-Allow-Origin': true,\r\n            },\r\n        });\r\n        setItems(response.data.map((data) => ({ ...data, selected: false })));\r\n    }\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            setNumSelected(items.length);\r\n            setItems(items.map((room) => ({ ...room, selected: true })));\r\n        }\r\n        else {\r\n            setNumSelected(0);\r\n            setItems(items.map((room) => ({ ...room, selected: false })));\r\n        }\r\n    }\r\n\r\n    const handleSelectClick = (event, room) => {\r\n        room.selected = event.target.checked;\r\n        setItems([...items]);\r\n        if (event.target.checked) {\r\n            setNumSelected(numSelected + 1);\r\n        }\r\n        else {\r\n            setNumSelected(numSelected - 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TableContainer component={Paper}>\r\n                <Table checboxselection=\"true\" sx={{ minWidTableCell: 850 }}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell padding=\"checkbox\">\r\n                                <Checkbox color=\"primary\" inputProps={{ 'aria-label': 'select all desserts', }}\r\n                                    indeterminate={numSelected > 0 && numSelected < items.length}\r\n                                    checked={items.length > 0 && numSelected === items.length}\r\n                                    onChange={handleSelectAllClick}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Name</TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Quantity</TableCell>\r\n                            <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Description</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {items.map(item =>\r\n                            <TableRow key={item.id}>\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox color=\"secondary\"\r\n                                        inputProps={{ 'aria-label': 'select all desserts', }}\r\n                                        checked={item.selected}\r\n                                        onChange={(e) => { handleSelectClick(e, item) }}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell width='300'>{item.name}</TableCell>\r\n                                <TableCell width='300'>{item.quantity}</TableCell>\r\n                                <TableCell>{item.description}</TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow sx={{ visibility: 'visible' }}>\r\n                            <TableCell padding=\"checkbox\"></TableCell>\r\n                            <TableCell>\r\n                                <TextField id=\"outlined-basic\" label='New Item name' variant=\"outlined\"\r\n                                    required size='small' fullwidth\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position='end'>\r\n                                                <TextFieldsIcon color='primary' />\r\n                                            </InputAdornment>)\r\n                                    }}\r\n                                //value={newRoom.classId}\r\n                                //onChange={(event) => setNewRoom(prevState => ({ ...prevState, classId: event.target.value }))}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <TextField id=\"outlined-basic\" label=\"Quantity\" variant=\"outlined\" required\r\n                                    size='small' fullwidth\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position='end'>\r\n                                                <DialpadIcon color='primary' />\r\n                                            </InputAdornment>)\r\n                                    }}\r\n                                //value={newRoom.className}\r\n                                //onChange={(event) => setNewRoom(prevState => ({ ...prevState, className: event.target.value }))}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <TextField id=\"outlined-basic\" label=\"Description\" variant=\"outlined\" required\r\n                                    size='small' fullwidth\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position='end'>\r\n                                                <TextFieldsIcon color='primary' />\r\n                                            </InputAdornment>)\r\n                                    }}\r\n                                //value={newRoom.classCapacity} InputLabelProps={{ shrink: true }}\r\n                                //onChange={(event) => setNewRoom(prevState => ({ ...prevState, classCapacity: event.target.value }))}\r\n                                />\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemsAdmin;","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport history from \"./utils/history\";\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\r\nimport AppNavBar from './components/AppNavBar.js';\r\nimport { getRouterConfig } from \"./config/config.js\";\r\nimport Home from \"./pages/Home\";\r\nimport Classrooms from './pages/Classrooms';\r\nimport Reservations from './pages/Reservations';\r\nimport ClassroomsAdm from './pages/ClassroomsAdmin';\r\nimport ItemsAdm from './pages/ItemsAdmin';\r\nimport { getApiConfig } from \"./config/config.js\";\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\n\r\nconst configRouter = getRouterConfig();\r\nconst configApi = getApiConfig();\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: 'dark',\r\n    primary: {\r\n      main: '#2E9FE6',\r\n    },\r\n    secondary: {\r\n      main: '#E69A2E',\r\n    },\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const [types, setClassTypes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    bindDictionary();\r\n  }, []);\r\n\r\n  const bindDictionary = async () => {\r\n    const response = await Axios.get(configApi.types, {\r\n      headers: {\r\n        'Access-ConTableRowol-Allow-Origin': true,\r\n      },\r\n    });\r\n    setClassTypes(response.data.map((data) => ({ label: data.typeName, value: data.id })));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <Router history={history}>\r\n          <CssBaseline />\r\n          <AppNavBar />\r\n          <Routes>\r\n            <Route exact path={configRouter.aliasHome} element={<Home />} />\r\n            <Route exact path={configRouter.aliasClassrooms} element={<Classrooms classTypes={types} />} />\r\n            <Route exact path={configRouter.aliasReservations} element={<Reservations />} />\r\n            <Route exact path={configRouter.aliasClassroomsAdm} element={<ClassroomsAdm classTypes={types} />} />\r\n            <Route exact path={configRouter.aliasItemsAdm} element={<ItemsAdm />} />\r\n          </Routes>\r\n        </Router>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './utils/reportWebVitals';\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\nimport { getAuthConfig } from \"./config/config.js\";\r\nimport history from \"./utils/history.js\";\r\nimport * as serviceWorker from \"./utils/serviceWorker.js\";\r\n\r\nconst onRedirectCallback = (appState) => {\r\n  history.push(\r\n    appState && appState.returnTo ? appState.returnTo : window.location.pathname\r\n  );\r\n};\r\n\r\nconst config = getAuthConfig();\r\n\r\nconst providerConfig = {\r\n  domain: config.domain,\r\n  clientId: config.clientId,\r\n  ...(config.audience ? { audience: config.audience } : null),\r\n  redirectUri: window.location.origin,\r\n  onRedirectCallback,\r\n};\r\n\r\nReactDOM.render(\r\n  <Auth0Provider {...providerConfig}>\r\n    <App />\r\n  </Auth0Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}