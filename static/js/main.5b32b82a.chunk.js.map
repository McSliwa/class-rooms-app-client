{"version":3,"sources":["utils/history.js","config/config.js","components/AppNavBar.js","pages/Home.js","pages/Classrooms.js","pages/Reservations.js","pages/ClassroomsAdmin.js","pages/ItemsAdmin.js","App.js","utils/reportWebVitals.js","utils/serviceWorker.js","index.js"],"names":["createBrowserHistory","getApiConfig","base_url","configJson","API","URL_BASE_PROD","classrooms","URL_ALIAS_CLASSROOMS","types","URL_ALIAS_CLASSROOMS_TYPES","items","URL_ALIAS_ITEMS","filtering","URL_ALIAS_CLASSROOMS_FILTERING","reservations","URL_ALIAS_RESERVATIONS","reservationsUserOnly","URL_ALIAS_RESERVATIONS_USER","getRouterConfig","aliasHome","ROUTER","ALIAS_HOME_PROD","aliasClassrooms","ALIAS_CLASSROOMS_VIEW","aliasReservations","ALIAS_RESERVATIONS","aliasItemsAdm","ALIAS_ITEMS_ADMIN","aliasClassroomsAdm","ALIAS_CLASSROOMS_ADMIN","configRouter","mappingTabToPath","1","2","3","4","5","AppNavBar","props","nav","useNavigate","useState","value","setValue","useAuth0","user","isAuthenticated","loginWithRedirect","logout","useEffect","handleTabChange","event","newValue","AppBar","component","Paper","variant","align","position","sx","color","fontWeight","background","Toolbar","IconButton","size","edge","mr","onClick","Tabs","onChange","flexGrow","scrollButtons","allowScrollButtonsMobile","Tab","label","fontSize","src","picture","alt","className","width","Home","elevation","m","p","configApi","Classrooms","filteredRooms","setFilteredRooms","dateStart","Date","now","dateEnd","capacity","type","minEquipment","filters","setFilters","numSelected","setNumSelected","setTypes","setItems","classTypes","getItemsData","getAccessTokenSilently","a","Axios","get","headers","then","response","data","map","quantity","getFilteredClassroomsData","token","post","start","toISOString","end","capacityMin","find","c","i","itemId","id","selected","console","log","addReservation","classroomId","r","catch","error","Grid","container","spacing","LocalizationProvider","dateAdapter","AdapterDateFns","locale","pl","item","md","DateTimePicker","OpenPickerButtonProps","showTodayButton","todayText","fullWidth","e","prevState","renderInput","params","TextField","disableMaskedInput","minDate","minDateTime","Autocomplete","disablePortal","popupIcon","clearIcon","options","inputValue","onInputChange","isOptionEqualToValue","option","InputProps","endAdornment","InputAdornment","InputLabelProps","shrink","target","multiple","disableCloseOnSelect","filterSelectedOptions","values","getOptionLabel","name","renderOption","key","placeholder","renderTags","getTagProps","index","Chip","clickable","icon","deleteIcon","onDelete","tmpRoomItems","indexOf","splice","handleChipDelete","handleChipClick","Button","TableContainer","Table","checboxselection","minWidTableCell","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","length","checked","room","TableBody","handleSelectClick","t","typeObjectId","Box","display","flexWrap","gap","classroomItems","disabled","Reservations","setReservations","onlyMyRes","setOnlyMyRes","getReservationsData","getReservationsUserOnlyData","deleteReservation","filter","forEach","rr","delete","FormControlLabel","control","reservation","ClassroomsAdmin","allRooms","setAllRooms","classId","classType","classCapacity","newRoom","setNewRoom","roomItems","setRoomItems","getClassroomsData","createClassroom","deleteClassroom","TableFooter","required","ItemsAdmin","description","newItem","setNewItem","createItem","deleteItems","inputProps","visibility","theme","createTheme","palette","mode","primary","main","secondary","components","MuiSelect","styleOverrides","App","setClassTypes","bindDictionary","labelLangPl","ThemeProvider","history","CssBaseline","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","config","audience","AUTH0","AUDIENCE","domain","DOMAIN","clientId","CLIENTID","getAuthConfig","providerConfig","redirectUri","origin","onRedirectCallback","appState","push","returnTo","pathname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b32b82a.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();\r\n","import configJson from \"./config.json\";\r\n\r\nexport const getAuthConfig = () => {\r\n  const audience =\r\n    configJson.AUTH0.AUDIENCE && configJson.AUTH0.AUDIENCE !== \"YOUR_API_IDENTIFIER\"\r\n      ? configJson.AUTH0.AUDIENCE\r\n      : null;\r\n\r\n  return {\r\n    domain: configJson.AUTH0.DOMAIN,\r\n    clientId: configJson.AUTH0.CLIENTID,\r\n    ...(audience ? { audience } : null),\r\n  };\r\n}\r\n\r\nexport const getApiConfig = () => {\r\n  const base_url = process.env.NODE_ENV === 'production' ? configJson.API.URL_BASE_PROD : configJson.API.URL_BASE_DEV;\r\n  return {\r\n    classrooms: base_url + configJson.API.URL_ALIAS_CLASSROOMS,\r\n    types: base_url + configJson.API.URL_ALIAS_CLASSROOMS_TYPES,\r\n    items: base_url + configJson.API.URL_ALIAS_ITEMS,\r\n    filtering: base_url + configJson.API.URL_ALIAS_CLASSROOMS + configJson.API.URL_ALIAS_CLASSROOMS_FILTERING,\r\n    reservations: base_url + configJson.API.URL_ALIAS_RESERVATIONS,\r\n    reservationsUserOnly: base_url + configJson.API.URL_ALIAS_RESERVATIONS + configJson.API.URL_ALIAS_RESERVATIONS_USER,\r\n  }\r\n}\r\n\r\nexport const getRouterConfig = () => {\r\n  return {\r\n    aliasHome: process.env.NODE_ENV === 'production' ? configJson.ROUTER.ALIAS_HOME_PROD : configJson.ROUTER.ALIAS_HOME,\r\n    aliasClassrooms: configJson.ROUTER.ALIAS_CLASSROOMS_VIEW,\r\n    aliasReservations: configJson.ROUTER.ALIAS_RESERVATIONS,\r\n    aliasItemsAdm: configJson.ROUTER.ALIAS_ITEMS_ADMIN,\r\n    aliasClassroomsAdm: configJson.ROUTER.ALIAS_CLASSROOMS_ADMIN\r\n  }\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Paper, AppBar, Toolbar, IconButton, Tabs, Tab\r\n} from '@mui/material';\r\nimport AccountCircle from '@mui/icons-material/AccountCircle';\r\nimport DoubleArrowIcon from '@mui/icons-material/DoubleArrow';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport { getRouterConfig } from \"../config/config\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst configRouter = getRouterConfig();\r\nconst mappingTabToPath = {\r\n    1: configRouter.aliasHome,\r\n    2: configRouter.aliasClassrooms,\r\n    3: configRouter.aliasReservations,\r\n    4: configRouter.aliasClassroomsAdm,\r\n    5: configRouter.aliasItemsAdm\r\n};\r\n\r\nfunction AppNavBar(props) {\r\n    const nav = useNavigate();\r\n    const [value, setValue] = useState(1);\r\n    const {\r\n        user,\r\n        isAuthenticated,\r\n        loginWithRedirect,\r\n        logout\r\n    } = useAuth0();\r\n\r\n    useEffect(() => {\r\n    });\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        nav(mappingTabToPath[newValue]);\r\n        setValue(newValue);\r\n    };\r\n\r\n    const nextTab = (event) => {\r\n        const nextValue = value === 5 ? 1 : (value + 1);\r\n        handleTabChange(event, nextValue);\r\n    };\r\n\r\n    return (\r\n        <AppBar component={Paper} variant='elevation' align='left' position=\"sticky\" sx={{\r\n            color: '#007ECC', fontWeight: 'bold',\r\n            background: 'linear-gradient(45deg, #E69A2E 20%,#FFC87A 90%)'\r\n        }}>\r\n            <Toolbar>\r\n                <IconButton size=\"large\" edge=\"start\" color=\"inherit\" sx={{ mr: 2 }}\r\n                    onClick={nextTab}\r\n                >\r\n                    <DoubleArrowIcon />\r\n                </IconButton>\r\n                <Tabs onChange={handleTabChange}\r\n                    sx={{ flexGrow: 1 }} variant='scrollable' scrollButtons='auto'\r\n                    allowScrollButtonsMobile value={value}\r\n                >\r\n                    <Tab label=\"O aplikacji\" value={1} />\r\n                    <Tab label=\"Szukaj\" value={2} />\r\n                    <Tab label=\"Rezerwacje\" value={3} />\r\n                    <Tab label=\"Pomieszczenia\" value={4} />\r\n                    <Tab label=\"Wyposażenie\" value={5} />\r\n                </Tabs>\r\n                {\r\n                    isAuthenticated ?\r\n                        (\r\n                            <>\r\n                                <IconButton color=\"inherit\" edge='end' size='large' sx={{ mr: 1 }}\r\n                                    onClick={logout}\r\n                                >\r\n                                    <LogoutIcon sx={{ fontSize: 40 }} />\r\n                                </IconButton>\r\n                                <img\r\n                                    src={user.picture}\r\n                                    alt=\"Profile\"\r\n                                    className=\"nav-user-profile rounded-circle\"\r\n                                    width=\"40\" />\r\n                            </>\r\n                        ) :\r\n                        (\r\n                            <IconButton color=\"inherit\" edge='end' size='large'\r\n                                onClick={loginWithRedirect}\r\n                            >\r\n                                <AccountCircle sx={{ fontSize: 40 }} />\r\n                            </IconButton>\r\n                        )\r\n                }\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default AppNavBar;","import { Paper } from '@mui/material'\r\nimport React from 'react'\r\n\r\nfunction Home() {\r\n    return (\r\n        <Paper elevation={24} sx={{ m: 1, p: 2 }} align=\"center\">\r\n            Witaj w aplikacji do wyszukiwania i zarządzania salami zajęciowymi.\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useState, useEffect } from 'react';\r\nimport Axios from 'axios';\r\nimport {\r\n    Button, Checkbox, Paper, Box, Chip,\r\n    Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\r\n    TextField, InputAdornment, Grid\r\n} from '@mui/material';\r\nimport DialpadIcon from '@mui/icons-material/Dialpad';\r\nimport ArrowDD from '@mui/icons-material/ArrowDropDownCircleOutlined';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport { pl } from 'date-fns/locale';\r\nimport { getApiConfig } from \"../config/config.js\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\r\n\r\nconst configApi = getApiConfig();\r\n\r\nfunction Classrooms(props) {\r\n    const [filteredRooms, setFilteredRooms] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        dateStart: new Date(Date.now()), dateEnd: new Date(Date.now()),\r\n        capacity: 0, type: \"\", minEquipment: []\r\n    });\r\n    const [numSelected, setNumSelected] = useState(0);\r\n    const [types, setTypes] = useState([]);\r\n    const [items, setItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTypes(props.classTypes);\r\n        getItemsData();\r\n    }, [props.classTypes]);\r\n\r\n    const {\r\n        getAccessTokenSilently,\r\n    } = useAuth0();\r\n\r\n    const getItemsData = async () => {\r\n        await Axios.get(configApi.items, {\r\n            headers: {\r\n                'Access-ConTableRowol-Allow-Origin': true,\r\n            },\r\n        }).then((response) => {\r\n            setItems(response.data.map((data) => ({ ...data, quantity: 1 })));\r\n        });\r\n    }\r\n\r\n    const getFilteredClassroomsData = async () => {\r\n        try {\r\n            const token = await getAccessTokenSilently();\r\n            await Axios.post(configApi.filtering,\r\n                {\r\n                    start: filters.dateStart.toISOString(),\r\n                    end: filters.dateEnd.toISOString(),\r\n                    capacityMin: filters.capacity,\r\n                    type: filters.type !== ''\r\n                        ? types.find(c => c.label === filters.type).value\r\n                        : '',\r\n                    minEquipment: filters.minEquipment.map(i => ({ itemId: i.id, quantity: i.quantity }))\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Access-ConTableRowol-Allow-Origin': true,\r\n                    }\r\n                }).then((response) => {\r\n                    setFilteredRooms(response.data.map((data) => ({ ...data, selected: false })));\r\n                });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleSelectClick = (e, room) => {\r\n        room.selected = e.target.checked;\r\n        setFilteredRooms([...filteredRooms]);\r\n        if (e.target.checked) {\r\n            setNumSelected(numSelected + 1);\r\n        }\r\n        else {\r\n            setNumSelected(numSelected - 1);\r\n        }\r\n    }\r\n\r\n    const handleSelectAllClick = (e) => {\r\n        if (e.target.checked) {\r\n            setNumSelected(filteredRooms.length);\r\n            setFilteredRooms(filteredRooms.map((room) => ({ ...room, selected: true })));\r\n        }\r\n        else {\r\n            setNumSelected(0);\r\n            setFilteredRooms(filteredRooms.map((room) => ({ ...room, selected: false })));\r\n        }\r\n    }\r\n\r\n    const addReservation = async () => {\r\n        try {\r\n            const token = await getAccessTokenSilently();\r\n            await Axios.post(configApi.reservations, {\r\n                start: filters.dateStart.toISOString(),\r\n                end: filters.dateEnd.toISOString(),\r\n                classroomId: filteredRooms.find(r => r.selected).id\r\n            },\r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Access-ConTableRowol-Allow-Origin': true,\r\n                    }\r\n                }).then(() => {\r\n                    getFilteredClassroomsData();\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleChipClick = (e, option) => {\r\n        let tmpRoomItems = [...filters.minEquipment];\r\n        let index = tmpRoomItems.indexOf(option);\r\n        tmpRoomItems[index].quantity += 1;\r\n        setFilters(prevState => ({ ...prevState, minEquipment: tmpRoomItems }));\r\n    };\r\n\r\n    const handleChipDelete = (e, option) => {\r\n        let tmpRoomItems = [...filters.minEquipment];\r\n        let index = tmpRoomItems.indexOf(option);\r\n        if (option.quantity === 1) {\r\n            tmpRoomItems.splice(index, 1);\r\n        } else {\r\n            tmpRoomItems[index].quantity -= 1;\r\n        }\r\n        setFilters(prevState => ({ ...prevState, minEquipment: tmpRoomItems }));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Paper elevation={24} sx={{ p: 2, flexGrow: 1, m: 1 }}>\r\n                <Grid container spacing={2}>\r\n                    <LocalizationProvider dateAdapter={AdapterDateFns} locale={pl}>\r\n                        <Grid item md={2}>\r\n                            <DateTimePicker OpenPickerButtonProps={{ color: 'primary' }}\r\n                                showTodayButton todayText='Now' fullWidth\r\n                                label=\"Data i godzina rozpoczęcia\"\r\n                                value={filters.dateStart}\r\n                                onChange={(e) => setFilters(prevState => ({ ...prevState, dateStart: e }))}\r\n                                renderInput={(params) => <TextField size='small' {...params} />}\r\n                                disableMaskedInput\r\n                                minDate={new Date(Date.now())}\r\n                                minDateTime={new Date(Date.now())}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={2}>\r\n                            <DateTimePicker OpenPickerButtonProps={{ color: 'primary' }}\r\n                                showTodayButton todayText='Now' fullWidth\r\n                                label=\"Data i godzina zakończenia\"\r\n                                value={filters.dateEnd}\r\n                                onChange={(e) => setFilters(prevState => ({ ...prevState, dateEnd: e }))}\r\n                                renderInput={(params) => <TextField size='small' {...params} />}\r\n                                disableMaskedInput\r\n                                minDate={new Date(Date.now())}\r\n                                minDateTime={new Date(Date.now())}\r\n                            />\r\n                        </Grid>\r\n                    </LocalizationProvider>\r\n                    <Grid item md={2}>\r\n                        <Autocomplete\r\n                            disablePortal size='small' fullWidth\r\n                            popupIcon={<ArrowDD color='primary' fontSize='small' />}\r\n                            clearIcon={<CancelIcon color='primary' fontSize='small' />}\r\n                            options={props.classTypes}\r\n                            inputValue={filters.type}\r\n                            onInputChange={(e, newValue) => {\r\n                                setFilters(prevState => ({ ...prevState, type: newValue }));\r\n                            }}\r\n                            isOptionEqualToValue={(option, value) => option.label === value.label}\r\n                            renderInput={(params) =>\r\n                                <TextField {...params} label=\"Typ\" variant='outlined' />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2}>\r\n                        <TextField label=\"Minimalna pojemność\" variant=\"outlined\"\r\n                            size='small' sx={{ mr: 2 }} fullWidth\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position='end'>\r\n                                        <DialpadIcon color='primary' fontSize='small' />\r\n                                    </InputAdornment>)\r\n                            }}\r\n                            value={filters.capacity} InputLabelProps={{ shrink: true }}\r\n                            onChange={(e) => setFilters(prevState => ({ ...prevState, capacity: e.target.value }))} />\r\n                    </Grid>\r\n                    <Grid item md={3}>\r\n                        <Autocomplete\r\n                            variant=\"outlined\" size='small'\r\n                            fullWidth multiple\r\n                            disableCloseOnSelect disablePortal filterSelectedOptions\r\n                            popupIcon={<ArrowDD color='primary' fontSize='small' />}\r\n                            clearIcon={<CancelIcon color='primary' fontSize='small' />}\r\n                            options={items}\r\n                            value={filters.minEquipment}\r\n                            onChange={(e, values) => setFilters(prevState => ({ ...prevState, minEquipment: values }))}\r\n                            getOptionLabel={(option) => `${option.name}`}\r\n                            isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                            renderOption={(props, option) => (\r\n                                <li {...props} key={option.id}>\r\n                                    {option.name}\r\n                                </li>\r\n                            )}\r\n                            renderInput={(params) => (\r\n                                <TextField {...params} label=\"Wyposażenie: minimalna ilość\"\r\n                                    placeholder='Więcej' />\r\n                            )}\r\n                            renderTags={(values, getTagProps) =>\r\n                                values.map((option, index) => (\r\n                                    <Chip {...getTagProps({ index })}\r\n                                        variant=\"filled\" size='small' clickable\r\n                                        label={`${option.name}: ${option.quantity}`}\r\n                                        icon={<AddCircleIcon color='secondary' />}\r\n                                        deleteIcon={<RemoveCircleIcon color='secondary' />}\r\n                                        onDelete={(e) => { handleChipDelete(e, option) }}\r\n                                        onClick={(e) => { handleChipClick(e, option) }}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1}>\r\n                        <Button variant=\"contained\" color='primary'\r\n                            sx={{ mr: 2, color: '#FFFFFF' }}\r\n                            onClick={getFilteredClassroomsData}>\r\n                            Szukaj\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Paper elevation={24} sx={{ p: 2, flexGrow: 1, m: 1 }}>\r\n                <TableContainer component={Paper}>\r\n                    <Table checboxselection=\"true\" sx={{ minWidTableCell: 1000 }}>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox color=\"primary\"\r\n                                        indeterminate={numSelected > 0 && numSelected < filteredRooms.length}\r\n                                        checked={filteredRooms.length > 0 && numSelected === filteredRooms.length}\r\n                                        onChange={handleSelectAllClick} />\r\n                                </TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Numer</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Nazwa</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Typ</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Pojemność</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Wyposażenie: ilość</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                filteredRooms.map(room =>\r\n                                    <TableRow key={room.id}>\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox color=\"secondary\"\r\n                                                checked={room.selected}\r\n                                                onChange={(e) => { handleSelectClick(e, room); }}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell width={150}>{room.id}</TableCell>\r\n                                        <TableCell width={200}>{room.name}</TableCell>\r\n                                        <TableCell width={100}>{\r\n                                            props.classTypes.length > 0\r\n                                                ? props.classTypes.find(t => t.value === room.typeObjectId).label\r\n                                                : room.typeObjectId\r\n                                        }\r\n                                        </TableCell>\r\n                                        <TableCell width={100}>{room.capacity}</TableCell>\r\n                                        <TableCell width={450}>\r\n                                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                                                {room.classroomItems.map((item) => (\r\n                                                    <Chip key={item.itemId}\r\n                                                        label={`${items.length > 0 ? items.find(i => i.id === item.itemId).name : item.itemId}: ${item.quantity}`}\r\n                                                        size='small'\r\n                                                    />\r\n                                                ))}\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n            <Paper elevation={24} sx={{ m: 1, p: 2, pl: 10 }} align=\"left\">\r\n                <Button variant=\"contained\" color='secondary' sx={{ mr: 2, color: '#FFFFFF' }}\r\n                    disabled={numSelected !== 1}\r\n                    onClick={addReservation}\r\n                >\r\n                    Zarezerwuj\r\n                </Button>\r\n            </Paper>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Classrooms;","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport {\r\n    Button, Checkbox, Paper,\r\n    Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\r\n    Grid, FormControlLabel, Typography\r\n} from '@mui/material';\r\nimport { getApiConfig } from \"../config/config.js\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nconst configApi = getApiConfig();\r\n\r\nfunction Reservations(props) {\r\n    const [reservations, setReservations] = useState([]);\r\n    const [numSelected, setNumSelected] = useState(0);\r\n    const [onlyMyRes, setOnlyMyRes] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        getReservationsData();\r\n    }, []);\r\n\r\n    const {\r\n        getAccessTokenSilently,\r\n    } = useAuth0();\r\n\r\n    const getReservationsData = async () => {\r\n        const response = await Axios.get(configApi.reservations, {\r\n            headers: {\r\n                'Access-ConTableRowol-Allow-Origin': true,\r\n            },\r\n        });\r\n        setReservations(response.data.map((data) => ({ ...data, selected: false })));\r\n    }\r\n\r\n    const getReservationsUserOnlyData = async () => {\r\n        try {\r\n            const token = await getAccessTokenSilently();\r\n            await Axios.get(configApi.reservationsUserOnly, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                    'Access-ConTableRowol-Allow-Origin': true,\r\n                }\r\n            }).then((response) => {\r\n                setReservations(response.data.map((data) => ({ ...data, selected: false })));\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            setNumSelected(reservations.length);\r\n            setReservations(reservations.map((room) => ({ ...room, selected: true })));\r\n        }\r\n        else {\r\n            setNumSelected(0);\r\n            setReservations(reservations.map((room) => ({ ...room, selected: false })));\r\n        }\r\n    }\r\n\r\n    const handleSelectClick = (event, room) => {\r\n        room.selected = event.target.checked;\r\n        setReservations([...reservations]);\r\n        if (event.target.checked) {\r\n            setNumSelected(numSelected + 1);\r\n        }\r\n        else {\r\n            setNumSelected(numSelected - 1);\r\n        }\r\n    }\r\n\r\n    const handleCheckUserOnly = (e) => {\r\n        setOnlyMyRes(e.target.checked);\r\n        if (e.target.checked) {\r\n            getReservationsUserOnlyData();\r\n        }\r\n        else {\r\n            getReservationsData();\r\n        }\r\n    }\r\n\r\n    const deleteReservation = async () => {\r\n        try {\r\n            const token = await getAccessTokenSilently();\r\n            reservations.filter(r => r.selected === true).forEach(rr => {\r\n                Axios.delete(`${configApi.reservations}/${rr.id}`, {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Access-ConTableRowol-Allow-Origin': true,\r\n                    }\r\n                }).then(() => {\r\n                    getReservationsUserOnlyData();\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Paper elevation={24} sx={{ p: 2, flexGrow: 1, m: 1 }}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={3}>\r\n                        <FormControlLabel label=\"Moje rezerwacje\"\r\n                            control={\r\n                                <Checkbox checked={onlyMyRes}\r\n                                    onChange={handleCheckUserOnly}\r\n                                    color='primary'\r\n                                />\r\n                            } />\r\n                    </Grid>\r\n                    <Grid item md={3}>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Paper elevation={24} sx={{ p: 2, flexGrow: 1, m: 1 }}>\r\n                <TableContainer component={Paper}>\r\n                    <Table checboxselection=\"true\" sx={{ minWidTableCell: 500 }}>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox color=\"primary\"\r\n                                        indeterminate={numSelected > 0 && numSelected < reservations.length}\r\n                                        checked={reservations.length > 0 && numSelected === reservations.length}\r\n                                        onChange={handleSelectAllClick} />\r\n                                </TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Numer pomieszczenia</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Rozpoczęcie</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Zakończenie</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {reservations.map(reservation => <TableRow key={reservation.id}>\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox color=\"secondary\"\r\n                                        checked={reservation.selected}\r\n                                        onChange={(e) => { handleSelectClick(e, reservation); }} />\r\n                                </TableCell>\r\n                                <TableCell width='300'>{reservation.classroomId}</TableCell>\r\n                                <TableCell>{reservation.start}</TableCell>\r\n                                <TableCell width='300'>{reservation.end}</TableCell>\r\n                            </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n            <Paper elevation={24} sx={{ m: 1, p: 2 }} align=\"left\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={3}>\r\n                        <Button\r\n                            variant=\"contained\" color='secondary'\r\n                            sx={{ mr: 2, color: '#FFFFFF' }}\r\n                            onClick={deleteReservation}\r\n                            disabled={!onlyMyRes}\r\n                        >\r\n                            {!onlyMyRes ? 'Zaznacz \"Moje rezerwacje\", aby usunąć.' : 'Usuń'}\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item md={3}>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Reservations\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport {\r\n    Button, Checkbox, Paper, Box, Chip,\r\n    Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\r\n    TableFooter, TextField, InputAdornment\r\n} from '@mui/material';\r\nimport DialpadIcon from '@mui/icons-material/Dialpad';\r\nimport TextFieldsIcon from '@mui/icons-material/TextFields';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport { getApiConfig } from \"../config/config.js\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport ArrowDD from '@mui/icons-material/ArrowDropDownCircleOutlined';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\r\n\r\nconst configApi = getApiConfig();\r\n\r\nfunction ClassroomsAdmin(props) {\r\n    const [allRooms, setAllRooms] = useState([]);\r\n    const [newRoom, setNewRoom] = useState({\r\n        classId: \"\", className: \"\",\r\n        classType: \"\", classCapacity: 0\r\n    });\r\n    const [numSelected, setNumSelected] = useState(0);\r\n    const [types, setTypes] = useState([]);\r\n    const [items, setItems] = useState([]);\r\n    const [roomItems, setRoomItems] = useState([])\r\n\r\n    useEffect(() => {\r\n        setTypes(props.classTypes);\r\n        getClassroomsData();\r\n        getItemsData();\r\n    }, [props.classTypes]);\r\n\r\n    const {\r\n        getAccessTokenSilently,\r\n    } = useAuth0();\r\n\r\n    const getClassroomsData = async () => {\r\n        const response = await Axios.get(configApi.classrooms, {\r\n            headers: {\r\n                'Access-ConTableRowol-Allow-Origin': true,\r\n            },\r\n        });\r\n        setAllRooms(response.data.map((data) => ({ ...data, selected: false })));\r\n    }\r\n\r\n    const getItemsData = async () => {\r\n        await Axios.get(configApi.items, {\r\n            headers: {\r\n                'Access-ConTableRowol-Allow-Origin': true,\r\n            },\r\n        }).then((response) => {\r\n            setItems(response.data.map((data) => ({ ...data, quantity: 1 })));\r\n        });\r\n    }\r\n\r\n    const createClassroom = async () => {\r\n        try {\r\n            const token = await getAccessTokenSilently();\r\n            Axios.post(configApi.classrooms,\r\n                {\r\n                    id: newRoom.classId,\r\n                    name: newRoom.className,\r\n                    typeObjectId: types.find(t => t.label === newRoom.classType).value,\r\n                    capacity: newRoom.classCapacity,\r\n                    classroomItems: roomItems.map(i => ({ itemId: i.id, quantity: i.quantity }))\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Access-ConTableRowol-Allow-Origin': true,\r\n                    }\r\n                }).then((response) => {\r\n                    setAllRooms([...allRooms, { ...response.data, selected: false }])\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                });\r\n            setNewRoom({ classId: \"\", className: \"\", classCapacity: 0, classType: \"\" });\r\n            setRoomItems([]);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const deleteClassroom = async () => {\r\n        try {\r\n            const token = await getAccessTokenSilently();\r\n            allRooms.filter(r => r.selected === true).forEach(rr => {\r\n                Axios.delete(`${configApi.classrooms}/${rr.id}`, {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Access-ConTableRowol-Allow-Origin': true,\r\n                    }\r\n                }).then(() => {\r\n                    getClassroomsData();\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            setNumSelected(allRooms.length);\r\n            setAllRooms(allRooms.map((room) => ({ ...room, selected: true })));\r\n        }\r\n        else {\r\n            setNumSelected(0);\r\n            setAllRooms(allRooms.map((room) => ({ ...room, selected: false })));\r\n        }\r\n    }\r\n\r\n    const handleSelectClick = (event, room) => {\r\n        room.selected = event.target.checked;\r\n        setAllRooms([...allRooms]);\r\n        if (event.target.checked) {\r\n            setNumSelected(numSelected + 1);\r\n        }\r\n        else {\r\n            setNumSelected(numSelected - 1);\r\n        }\r\n    }\r\n\r\n    const handleChipClick = (e, option) => {\r\n        let tmpRoomItems = [...roomItems];\r\n        let index = tmpRoomItems.indexOf(option);\r\n        tmpRoomItems[index].quantity += 1;\r\n        setRoomItems(tmpRoomItems);\r\n    };\r\n\r\n    const handleChipDelete = (e, option) => {\r\n        let tmpRoomItems = [...roomItems];\r\n        let index = tmpRoomItems.indexOf(option);\r\n        if (option.quantity === 1) {\r\n            tmpRoomItems.splice(index, 1);\r\n        } else {\r\n            tmpRoomItems[index].quantity -= 1;\r\n        }\r\n        setRoomItems(tmpRoomItems);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Paper elevation={24} sx={{ p: 2, flexGrow: 1, m: 1 }}>\r\n                <TableContainer component={Paper}>\r\n                    <Table checboxselection=\"true\" sx={{ minWidTableCell: 1000 }}>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox color=\"primary\"\r\n                                        indeterminate={numSelected > 0 && numSelected < allRooms.length}\r\n                                        checked={allRooms.length > 0 && numSelected === allRooms.length}\r\n                                        onChange={handleSelectAllClick}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Numer</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Nazwa</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Typ</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Pojemność</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Wyposażenie: ilość</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                allRooms.map(room =>\r\n                                    <TableRow key={room.id}>\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox color=\"secondary\"\r\n                                                checked={room.selected}\r\n                                                onChange={(e) => { handleSelectClick(e, room) }}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell width={150}>{room.id}</TableCell>\r\n                                        <TableCell width={200}>{room.name}</TableCell>\r\n                                        <TableCell width={100}>{\r\n                                            props.classTypes.length > 0\r\n                                                ? props.classTypes.find(t => t.value === room.typeObjectId).label\r\n                                                : room.typeObjectId\r\n                                        }\r\n                                        </TableCell>\r\n                                        <TableCell width={100}>{room.capacity}</TableCell>\r\n                                        <TableCell width={450}>\r\n                                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                                                {room.classroomItems.map((item) => (\r\n                                                    <Chip key={item.itemId}\r\n                                                        label={`${items.length > 0 ? items.find(i => i.id === item.itemId).name : item.itemId}: ${item.quantity}`}\r\n                                                        size='small'\r\n                                                    />\r\n                                                ))}\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            }\r\n                        </TableBody>\r\n                        <TableFooter>\r\n                            <TableRow>\r\n                                <TableCell padding=\"checkbox\">\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <TextField id=\"outlined-basic\" label='Nowy numer' variant=\"outlined\"\r\n                                        required size='small' fullWidth\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position='end'>\r\n                                                    <DialpadIcon color='primary' />\r\n                                                </InputAdornment>)\r\n                                        }}\r\n                                        value={newRoom.classId}\r\n                                        onChange={(event) => setNewRoom(prevState => ({\r\n                                            ...prevState, classId: event.target.value\r\n                                        }))}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <TextField id=\"outlined-basic\" label=\"Nazwa\" variant=\"outlined\" required\r\n                                        size='small' fullWidth\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position='end'>\r\n                                                    <TextFieldsIcon color='primary' />\r\n                                                </InputAdornment>)\r\n                                        }}\r\n                                        value={newRoom.className}\r\n                                        onChange={(event) => setNewRoom(prevState => ({\r\n                                            ...prevState, className: event.target.value\r\n                                        }))}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Autocomplete\r\n                                        id=\"classrooms-types\"\r\n                                        disablePortal size='small' fullWidth\r\n                                        popupIcon={<ArrowDD color='primary' fontSize='small' />}\r\n                                        clearIcon={<CancelIcon color='primary' fontSize='small' />}\r\n                                        options={props.classTypes}\r\n                                        inputValue={newRoom.classType}\r\n                                        onInputChange={(e, newValue) => {\r\n                                            setNewRoom(prevState => ({ ...prevState, classType: newValue }));\r\n                                        }}\r\n                                        isOptionEqualToValue={(option, value) => option.label === value.label}\r\n                                        renderInput={(params) =>\r\n                                            <TextField {...params} label=\"Typ\" variant='outlined' required />}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <TextField id=\"outlined-basic\" label=\"Pojemność\" variant=\"outlined\" required\r\n                                        size='small' fullWidth\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position='end'>\r\n                                                    <DialpadIcon color='primary' />\r\n                                                </InputAdornment>)\r\n                                        }}\r\n                                        value={newRoom.classCapacity}\r\n                                        onChange={(event) => setNewRoom(prevState => ({\r\n                                            ...prevState, classCapacity: event.target.value\r\n                                        }))}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Autocomplete\r\n                                        variant=\"outlined\" size='small'\r\n                                        fullWidth multiple\r\n                                        disableCloseOnSelect disablePortal filterSelectedOptions\r\n                                        popupIcon={<ArrowDD color='primary' fontSize='small' />}\r\n                                        clearIcon={<CancelIcon color='primary' fontSize='small' />}\r\n                                        options={items}\r\n                                        value={roomItems}\r\n                                        onChange={(e, values) => setRoomItems(values)}\r\n                                        getOptionLabel={(option) => `${option.name}`}\r\n                                        isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                                        renderOption={(props, option) => (\r\n                                            <li {...props} key={option.id}>\r\n                                                {option.name}\r\n                                            </li>\r\n                                        )}\r\n                                        renderInput={(params) => (\r\n                                            <TextField {...params} label=\"Wyposażenie\"\r\n                                                placeholder='Więcej' />\r\n                                        )}\r\n                                        renderTags={(values, getTagProps) =>\r\n                                            values.map((option, index) => (\r\n                                                <Chip {...getTagProps({ index })}\r\n                                                    variant=\"filled\" size='small' clickable\r\n                                                    label={`${option.name}: ${option.quantity}`}\r\n                                                    icon={<AddCircleIcon color='secondary' />}\r\n                                                    deleteIcon={<RemoveCircleIcon color='secondary' />}\r\n                                                    onDelete={(e) => { handleChipDelete(e, option) }}\r\n                                                    onClick={(e) => { handleChipClick(e, option) }}\r\n                                                />\r\n                                            ))\r\n                                        }\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableFooter>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n            <Paper elevation={24} sx={{ m: 1, p: 2, pl: 10 }} align=\"left\">\r\n                <Button variant=\"contained\" color='primary' sx={{ mr: 2, color: '#FFFFFF' }}\r\n                    onClick={createClassroom}>\r\n                    {numSelected === 0 ? 'Dodaj' : 'Zapisz'}\r\n                </Button>\r\n                <Button variant=\"contained\" color='secondary' sx={{ mr: 2, color: '#FFFFFF' }}\r\n                    disabled={numSelected === 0}\r\n                    onClick={deleteClassroom}>\r\n                    Usuń\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\" color='primary'\r\n                    sx={{ mr: 2, color: '#FFFFFF' }}\r\n                    disabled={numSelected !== 1}\r\n                //onClick={createClassroom}\r\n                >\r\n                    Edytuj\r\n                </Button>\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClassroomsAdmin;","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport {\r\n    Checkbox, Paper, Button,\r\n    Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\r\n    TableFooter, TextField, InputAdornment\r\n} from '@mui/material';\r\nimport TextFieldsIcon from '@mui/icons-material/TextFields';\r\nimport { getApiConfig } from \"../config/config.js\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nconst configApi = getApiConfig();\r\n\r\nfunction ItemsAdmin(props) {\r\n    const [items, setItems] = useState([]);\r\n    const [numSelected, setNumSelected] = useState(0);\r\n    const [newItem, setNewItem] = useState({\r\n        name: '', description: ''\r\n    });\r\n\r\n    const {\r\n        getAccessTokenSilently,\r\n    } = useAuth0();\r\n\r\n    useEffect(() => {\r\n        getItemsData();\r\n    }, []);\r\n\r\n    const getItemsData = async () => {\r\n        const response = await Axios.get(configApi.items, {\r\n            headers: {\r\n                'Access-ConTableRowol-Allow-Origin': true,\r\n            },\r\n        });\r\n        setItems(response.data.map((data) => ({ ...data, selected: false })));\r\n    }\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            setNumSelected(items.length);\r\n            setItems(items.map((room) => ({ ...room, selected: true })));\r\n        }\r\n        else {\r\n            setNumSelected(0);\r\n            setItems(items.map((room) => ({ ...room, selected: false })));\r\n        }\r\n    }\r\n\r\n    const handleSelectClick = (event, room) => {\r\n        room.selected = event.target.checked;\r\n        setItems([...items]);\r\n        if (event.target.checked) {\r\n            setNumSelected(numSelected + 1);\r\n        }\r\n        else {\r\n            setNumSelected(numSelected - 1);\r\n        }\r\n    }\r\n\r\n    const createItem = async () => {\r\n        try {\r\n            const token = await getAccessTokenSilently();\r\n            await Axios.post(configApi.items, {\r\n                name: newItem.name,\r\n                description: newItem.description\r\n            },\r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Access-ConTableRowol-Allow-Origin': true,\r\n                    }\r\n                }).then((response) => {\r\n                    setItems([...items, { ...response.data, selected: false }])\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                });\r\n            setNewItem({ name: '', description: '' });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const deleteItems = async () => {\r\n        try {\r\n            const token = await getAccessTokenSilently();\r\n            items.filter(r => r.selected === true).forEach(rr => {\r\n                Axios.delete(`${configApi.items}/${rr.id}`, {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Access-ConTableRowol-Allow-Origin': true,\r\n                    }\r\n                }).then(() => {\r\n                    getItemsData();\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Paper elevation={24} sx={{ p: 2, flexGrow: 1, m: 1 }}>\r\n                <TableContainer component={Paper}>\r\n                    <Table checboxselection=\"true\" sx={{ minWidTableCell: 850 }}>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox color=\"primary\"\r\n                                        indeterminate={numSelected > 0 && numSelected < items.length}\r\n                                        checked={items.length > 0 && numSelected === items.length}\r\n                                        onChange={handleSelectAllClick}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Nazwa</TableCell>\r\n                                <TableCell sx={{ fontWeight: 'bold', fontSize: 16 }}>Opis</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {items.map(item =>\r\n                                <TableRow key={item.id}>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <Checkbox color=\"secondary\"\r\n                                            inputProps={{ 'aria-label': 'select all desserts', }}\r\n                                            checked={item.selected}\r\n                                            onChange={(e) => { handleSelectClick(e, item) }}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell width='200'>{item.name}</TableCell>\r\n                                    <TableCell width='400'>{item.description}</TableCell>\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                        <TableFooter>\r\n                            <TableRow sx={{ visibility: 'visible' }}>\r\n                                <TableCell padding=\"checkbox\"></TableCell>\r\n                                <TableCell>\r\n                                    <TextField id=\"outlined-basic\" label='Nazwa nowego przedmiotu' variant=\"outlined\"\r\n                                        required size='small' fullWidth\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position='end'>\r\n                                                    <TextFieldsIcon color='primary' />\r\n                                                </InputAdornment>)\r\n                                        }}\r\n                                        value={newItem.name}\r\n                                        onChange={(e) => setNewItem(prevState => ({ ...prevState, name: e.target.value }))}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <TextField id=\"outlined-basic\" label=\"Opis\" variant=\"outlined\"\r\n                                        size='small' fullWidth\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position='end'>\r\n                                                    <TextFieldsIcon color='primary' />\r\n                                                </InputAdornment>)\r\n                                        }}\r\n                                        value={newItem.description}\r\n                                        onChange={(e) => setNewItem(prevState => ({ ...prevState, description: e.target.value }))}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableFooter>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n            <Paper elevation={24} sx={{ m: 1, p: 2, pl: 10 }} align=\"left\">\r\n                <Button\r\n                    variant=\"contained\" color='primary'\r\n                    sx={{ mr: 2, color: '#FFFFFF' }}\r\n                    onClick={createItem}\r\n                >\r\n                    Dodaj\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\" color='secondary'\r\n                    sx={{ mr: 2, color: '#FFFFFF' }}\r\n                    onClick={deleteItems}\r\n                >\r\n                    Usuń\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\" color='primary'\r\n                    sx={{ mr: 2, color: '#FFFFFF' }}\r\n                    disabled={numSelected !== 1}\r\n                //onClick={createClassroom}\r\n                >\r\n                    Edytuj\r\n                </Button>\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemsAdmin;","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport history from \"./utils/history\";\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\r\nimport AppNavBar from './components/AppNavBar.js';\r\nimport { getRouterConfig } from \"./config/config.js\";\r\nimport Home from \"./pages/Home\";\r\nimport Classrooms from './pages/Classrooms';\r\nimport Reservations from './pages/Reservations';\r\nimport ClassroomsAdm from './pages/ClassroomsAdmin';\r\nimport ItemsAdm from './pages/ItemsAdmin';\r\nimport { getApiConfig } from \"./config/config.js\";\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\n\r\nconst configRouter = getRouterConfig();\r\nconst configApi = getApiConfig();\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: 'dark',\r\n    primary: {\r\n      main: '#2E9FE6',\r\n    },\r\n    secondary: {\r\n      main: '#E69A2E',\r\n    },\r\n  },\r\n  components: {\r\n    MuiSelect: {\r\n      styleOverrides: {\r\n        icon: {\r\n          color: '#2E9FE6',\r\n          fontSize: '22px'\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const [types, setClassTypes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    bindDictionary();\r\n  }, []);\r\n\r\n  const bindDictionary = async () => {\r\n    const response = await Axios.get(configApi.types, {\r\n      headers: {\r\n        'Access-ConTableRowol-Allow-Origin': true,\r\n      },\r\n    });\r\n    setClassTypes(response.data.map((data) => ({ label: data.labelLangPl, value: data.id })));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <Router history={history}>\r\n          <CssBaseline />\r\n          <AppNavBar />\r\n          <Routes>\r\n            <Route exact path={configRouter.aliasHome} element={<Home />} />\r\n            <Route exact path={configRouter.aliasClassrooms} element={<Classrooms classTypes={types} />} />\r\n            <Route exact path={configRouter.aliasReservations} element={<Reservations />} />\r\n            <Route exact path={configRouter.aliasClassroomsAdm} element={<ClassroomsAdm classTypes={types} />} />\r\n            <Route exact path={configRouter.aliasItemsAdm} element={<ItemsAdm />} />\r\n          </Routes>\r\n        </Router>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './utils/reportWebVitals';\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\nimport { getAuthConfig } from \"./config/config.js\";\r\nimport history from \"./utils/history.js\";\r\nimport * as serviceWorker from \"./utils/serviceWorker.js\";\r\n\r\nconst onRedirectCallback = (appState) => {\r\n  history.push(\r\n    appState && appState.returnTo ? appState.returnTo : window.location.pathname\r\n  );\r\n};\r\n\r\nconst config = getAuthConfig();\r\n\r\nconst providerConfig = {\r\n  domain: config.domain,\r\n  clientId: config.clientId,\r\n  ...(config.audience ? { audience: config.audience } : null),\r\n  redirectUri: window.location.origin,\r\n  onRedirectCallback,\r\n};\r\n\r\nReactDOM.render(\r\n  <Auth0Provider {...providerConfig}>\r\n    <App />\r\n  </Auth0Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}